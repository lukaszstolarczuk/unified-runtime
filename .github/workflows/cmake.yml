name: Build and test

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  ubuntu-build:
    name: Basic builds
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-20.04', 'ubuntu-22.04', 'opensuse-leap-15', 'rockylinux-8', 'rockylinux-9']
        build_type: [Debug, Release]
        compiler: [{c: gcc, cxx: g++}, {c: clang, cxx: clang++}]
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - name: Build docker
      working-directory: ${{github.workspace}}
      run: docker build -t ur-${{matrix.os}} -f .github/docker/${{matrix.os}}.Dockerfile .

    - name: Build and run basic tests
      working-directory: ${{github.workspace}}
      run: |
        docker run -i \
          -v ${{github.workspace}}:/tmp/ur \
          -w /tmp/ur/ \
          ur-${{matrix.os}} \
          ./.github/scripts/run-basic.sh ${{matrix.compiler.c}} ${{matrix.compiler.cxx}} ${{matrix.build_type}}

  fuzztest:
    if: false
    name: Fuzz tests short
    uses: ./.github/workflows/build-fuzz-reusable.yml
    with:
      test_label: "fuzz-short"
    
  level-zero:
    name: Level Zero
    uses: ./.github/workflows/build-hw-reusable.yml
    with:
      name: L0

  opencl:
    name: OpenCL
    uses: ./.github/workflows/build-hw-reusable.yml
    with:
      name: OPENCL
      platform: "Intel(R) OpenCL"

  cuda:
    name: CUDA
    uses: ./.github/workflows/build-hw-reusable.yml
    with:
      name: CUDA

  hip:
    name: HIP
    uses: ./.github/workflows/build-hw-reusable.yml
    with:
      name: HIP

  native-cpu:
    name: Native CPU
    uses: ./.github/workflows/build-hw-reusable.yml
    with:
      name: NATIVE_CPU

  e2e-level-zero:
    name: E2E L0
    permissions:
      contents: read
      pull-requests: write
    needs: [ubuntu-build, level-zero]
    uses: ./.github/workflows/e2e_level_zero.yml

  e2e-opencl:
    name: E2E OpenCL
    permissions:
      contents: read
      pull-requests: write
    needs: [ubuntu-build, opencl]
    uses: ./.github/workflows/e2e_opencl.yml

  e2e-cuda:
    name: E2E CUDA
    permissions:
      contents: read
      pull-requests: write
    needs: [ubuntu-build, cuda]
    uses: ./.github/workflows/e2e_cuda.yml

  windows-build:
    name: Build - Windows
    if: false
    strategy:
      matrix:
        os: ['windows-2019', 'windows-2022']
        adapter: [
          {name: None, var: ''}, {name: L0, var: '-DUR_BUILD_ADAPTER_L0=ON'}
        ]

        # TODO: building level zero loader on windows-2019 and clang-cl is currently broken
        exclude:
         - os: 'windows-2019'
           adapter: {name: L0, var: '-DUR_BUILD_ADAPTER_L0=ON'}
         - adapter: {name: L0, var: '-DUR_BUILD_ADAPTER_L0=ON'}
           compiler: {c: clang-cl, cxx: clang-cl}

        build_type: [Debug, Release]
        compiler: [{c: cl, cxx: cl}, {c: clang-cl, cxx: clang-cl}]
        include:
          - compiler: {c: clang-cl, cxx: clang-cl}
            toolset: "-T ClangCL"
    runs-on: ${{matrix.os}}

    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
      with:
        python-version: 3.9

    - name: Install prerequisites
      run: python3 -m pip install -r third_party/requirements.txt

    - name: Install doxygen
      run: |
        $WorkingDir = $PWD.Path
        Invoke-WebRequest -Uri https://github.com/doxygen/doxygen/releases/download/Release_1_9_8/doxygen-1.9.8.windows.x64.bin.zip -OutFile "$WorkingDir\doxygen.zip"
        Expand-Archive -Path "$WorkingDir\doxygen.zip"
        Add-Content $env:GITHUB_PATH "$WorkingDir\doxygen"

    - name: Configure CMake
      run: >
        cmake
        -B${{github.workspace}}/build
        ${{matrix.toolset}}
        -DCMAKE_C_COMPILER=${{matrix.compiler.c}}
        -DCMAKE_CXX_COMPILER=${{matrix.compiler.cxx}}
        -DCMAKE_POLICY_DEFAULT_CMP0094=NEW
        -DUR_ENABLE_TRACING=ON
        -DUR_DEVELOPER_MODE=ON
        -DUR_BUILD_TESTS=ON
        -DUR_FORMAT_CPP_STYLE=ON
        ${{matrix.adapter.var}}

    # TODO: re-enable when check-generated is fixed for windows runners see #888
    # - name: Generate source from spec, check for uncommitted diff
    #   if: matrix.os == 'windows-2022'
    #   run: cmake --build ${{github.workspace}}/build --target check-generated --config ${{matrix.build_type}}

    - name: Build all
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} -j $Env:NUMBER_OF_PROCESSORS

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{matrix.build_type}} --output-on-failure -L "umf|loader|validation|tracing|unit|urtrace"

  macos-build:
    name: Build - MacOS
    if: false
    strategy:
        matrix:
          os: ['macos-12', 'macos-13']
    runs-on: ${{matrix.os}}

    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
      with:
        python-version: 3.9

    - name: Install prerequisites
      run: python3 -m pip install -r third_party/requirements.txt

    - name: Configure CMake
      run: >
        cmake
        -B${{github.workspace}}/build
        -DUR_ENABLE_TRACING=ON
        -DUR_DEVELOPER_MODE=ON
        -DCMAKE_BUILD_TYPE=Release
        -DUR_BUILD_TESTS=ON
        -DUR_FORMAT_CPP_STYLE=ON
        -DUMF_ENABLE_POOL_TRACKING=ON
    - name: Build
      run: cmake --build ${{github.workspace}}/build -j $(sysctl -n hw.logicalcpu)
